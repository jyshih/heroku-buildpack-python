#!/usr/bin/env bash

# This script serves as the Scipy/Numpy build step of the
# [**Python Buildpack**](https://github.com/heroku/heroku-buildpack-python) 
# compiler. 
# 
# A [buildpack](http://devcenter.heroku.com/articles/buildpacks) is an 
# adapter between a Python application and Heroku's runtime.

# If numpy or scipy exists within requirements.txt then use binaries.
puts-step "Bootstrapping numpy/scipy dependencies and install scripts"

# Change into /app/.heroku path 
cd .heroku

# check whether this has happened already
if [ -d "vendor/lib/atlas-base" ]; then
  puts-step "Using cached binaries."
else
  # Download and extract everything into target vendor directory.
  puts-step "Creating numscipy dependency binaries."
  mkdir npscipy-dependencies &> /dev/null
  cp $ROOT_DIR/vendor/numscipy_dependencies.tar.gz npscipy-dependencies/numscipy_dependencies.tar.gz &> /dev/null
  tar -xvf npscipy-dependencies/numscipy_dependencies.tar.gz &> /dev/null 
  rm -r npscipy-dependencies/ &> /dev/null
fi

# set BLAS/LAPACK/ATLAS
export BLAS=$(pwd)/vendor/lib/atlas-base/atlas/libblas.a
export LAPACK=$(pwd)/vendor/lib/atlas-base/atlas/liblapack.a
export ATLAS=$(pwd)/vendor/lib/atlas-base/libatlas.a
export LIBRARY_PATH=$(pwd)/vendor/lib:$(pwd)/vender/lib/atlas-base:$(pwd)/vender/lib/atlas-base/atlas:$(pwd)/lib/atlas-base:$(pwd)/lib/atlas-base/atlas
export LD_LIBRARY_PATH=$(pwd)/vendor/lib:$(pwd)/vendor/lib/atlas-base:$(pwd)/vendor/lib/atlas-base/atlas:$(pwd)/lib/atlas-base:$(pwd)/lib/atlas-base/atlas
export PYTHON_SITE_PACKAGES=/app/.heroku/python/lib/python2.7/site-packages

# Exit back to root
cd ..

# install Numpy & OpenOpt
if [ -d "$PYTHON_SITE_PACKAGES/numpy" ]; then
  puts-step "Using cached numpy & openopt."
else
  puts-step "Installing Python Numpy & OpenOpt"
  cd $ROOT_DIR/vendor/numpy/
  python setup.py install &> /dev/null
  cd $ROOT_DIR/vendor/oosuite/
  python install_all.py &> /dev/null 
  cd $WORKING_DIR
fi

# install SciPy
if [ -d "$PYTHON_SITE_PACKAGES/scipy" ]; then
  puts-step "Using cached scipy"
else
  puts-step "Installing Python SciPy"
  cd $ROOT_DIR/vendor/
  tar -xvf scipy.tar.gz &> /dev/null 
  cp -r venv/lib/python2.7/site-packages/scipy* $PYTHON_SITE_PACKAGES &> /dev/null
  cd $WORKING_DIR
fi

if [ -d "$PYTHON_SITE_PACKAGES/glpk" ]; then
  puts-step "Using cached glpk"
else
  puts-setp "Installing Python glpk"
  cd $ROOT_DIR/vendor/glpk/glpk-4.44/
  ./configure &> /dev/null
  make &> /dev/null
  cd $WORKING_DIR
fi

if [ -d "$PYTHON_SITE_PACKAGES/cvxopt" ]; then
  puts-step "Using cached cvxopt solver"
else
  puts-step "Installing Python OpenOpt CVXOPT Solver"
  cd $ROOT_DIR/vendor/cvxopt/src/
  python setup.py install &> /dev/null
  cd $WORKING_DIR
fi

